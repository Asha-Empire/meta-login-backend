# Generated by Django 5.2.1 on 2025-06-08 02:50

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GameAccount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Username (can be an email address or a custom username).', max_length=150, unique=True)),
                ('email', models.EmailField(help_text="The user's email address.", max_length=254, unique=True)),
                ('password_hash', models.CharField(help_text='Password hash value. Password is not stored in plain text.', max_length=128)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the user is active or not.')),
                ('display_name', models.CharField(blank=True, help_text='Display name shown to other players.', max_length=100, null=True)),
                ('character_name', models.CharField(blank=True, help_text='In-game character display name.', max_length=100, null=True)),
                ('level', models.PositiveIntegerField(default=1, help_text="Player's current level in the game.")),
                ('experience_points', models.BigIntegerField(default=0, help_text='Total experience points earned by the player.')),
                ('coins', models.BigIntegerField(default=0, help_text='Primary in-game currency (coins/gold).')),
                ('gems', models.BigIntegerField(default=0, help_text='Premium in-game currency (gems/diamonds).')),
                ('health_points', models.PositiveIntegerField(default=100, help_text='Current health/life points of the player.')),
                ('max_health_points', models.PositiveIntegerField(default=100, help_text='Maximum health/life points of the player.')),
                ('energy', models.PositiveIntegerField(default=100, help_text='Current energy points for gameplay activities.')),
                ('max_energy', models.PositiveIntegerField(default=100, help_text='Maximum energy points the player can have.')),
                ('current_stage', models.PositiveIntegerField(default=1, help_text='Current stage/level the player is on.')),
                ('achievements_unlocked', models.PositiveIntegerField(default=0, help_text='Number of achievements unlocked by the player.')),
                ('rank_tier', models.CharField(default='Bronze', help_text="Player's rank or tier in competitive gameplay.", max_length=50)),
                ('total_playtime_minutes', models.BigIntegerField(default=0, help_text='Total time spent playing the game in minutes.')),
                ('games_played', models.BigIntegerField(default=0, help_text='Total number of games/matches played.')),
                ('games_won', models.BigIntegerField(default=0, help_text='Total number of games/matches won.')),
                ('highest_score', models.BigIntegerField(default=0, help_text="Player's highest achieved score.")),
                ('friends_count', models.PositiveIntegerField(default=0, help_text='Number of friends the player has.')),
                ('guild_name', models.CharField(blank=True, help_text='Name of the guild/clan the player belongs to.', max_length=100, null=True)),
                ('last_login_at', models.DateTimeField(blank=True, help_text='The date-time when the user last logged into the game.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date-time the game account was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date-time the game account was updated.')),
            ],
            options={
                'verbose_name': 'Meta Game Account (GameAccount)',
                'verbose_name_plural': 'Meta Game Accounts (GameAccounts)',
                'ordering': ['username'],
            },
        ),
    ]
